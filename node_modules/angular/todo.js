angular.module('todoApp', ['ngRoute'])
  .config(function($routeProvider) {
    $routeProvider
      .when('/', {
        templateUrl: 'login.html',
        controller: 'Login'
      })
      .when('/cadastro', {
        templateUrl: 'cadastro.html',
        controller: 'CadastroLogin'
      })
      .when('/cadastrarGuia',{
        templateUrl: 'cadastrarGuia.html',
        controller: 'cadastrarGuia'
      })
      .otherwise({
        redirectTo: '/'
      });
  })

  angular.module('todoApp').directive('fileModel', ['$parse', function ($parse) {
    return {
      restrict: 'A',
      link: function(scope, element, attrs) {
        const model = $parse(attrs.fileModel);
        const modelSetter = model.assign;
  
        element.bind('change', function() {
          const file = element[0].files[0];
          if (!file) return;
  
          const reader = new FileReader();
          reader.onload = function(e) {
            scope.$apply(function() {
              modelSetter(scope, e.target.result); 
            });
          };
          reader.readAsDataURL(file);
        });
      }
    };
  }])

  .controller('Login', function ($scope, $http, $location) {
    $scope.app = "Login";
    $scope.cpf = "";
    $scope.senha = "";
    $scope.login = function (cpf, senha) {
      $scope.dadosUsuario = { cpf: cpf, senha: senha };
      $http.post('http://localhost:8081/auth/login', $scope.dadosUsuario)
        .then(function(response) {
          $scope.token = response.data.token
          localStorage.setItem('token', $scope.token);
          alert('Seja bem-vindo');
          $location.path('/cadastrarGuia');
        })
        .catch(function(error) {
          alert(error.data.errors);
          console.error('Erro no login:', error);
        });
    };
  })

  .controller('CadastroLogin', function ($scope, $http, $location) {
    $scope.app = "Cadastro";
    $scope.cpf = "";
    $scope.senha = "";
    $scope.cadastro = function (cpf, senha) {
      $scope.dadosUsuario = { cpf: cpf, senha: senha };
      $http.post('http://localhost:8081/auth/cadastro', $scope.dadosUsuario)
        .then(function(response) {
          alert('Cadastro Realizado com Sucesso');
          $location.path('/');
        })
        .catch(function(error) {
          alert('Cadastro não realizado ' + error.data.errors);
          console.error('Erro no cadastro:', error);
        });
    };
  })

  .controller('cadastrarGuia', function ($scope, $http) {
    $scope.app = "Cadastrar Guia";
    $scope.nome = "";
    $scope.cpf = "";
    $scope.endereco = "";
    $scope.recebedor = "";
    $scope.cidade = "";
    $scope.valor = "";

    $scope.gerarGuia = function (nome, cpf, endereco, recebedor, cidade, valor) {
      const dadosDaGuia = {
        proprietario: nome,
        cpf: cpf,
        endereco: endereco,
        valor: parseFloat(valor),
        recebedor: {
            nome: recebedor,
            cidade: cidade
        }
      };
      const token = localStorage.getItem('token'); 
      $http.post('http://localhost:8081/pagamento/', dadosDaGuia,  {
        headers: {
          'Authorization': 'Bearer ' + token
        },
        responseType: 'arraybuffer'
      })
        .then(function(response) {
          var guia = new Blob([response.data], { type: 'application/pdf' });
          var guiaURL = URL.createObjectURL(guia);
          window.open(guiaURL);
        })
        .catch(function(error) {
          alert('Pdf não foi gerado ' + error.data.errors);
        });
    };

    $scope.atualizarProjeto = function (nome, descricao, dataInicio, dataFim) {
      const projeto = {
        id: $scope.projeto.idProjeto,
        nome: nome,
        descricao: descricao,
        dataInicio: dataInicio,
        dataFim: dataFim,
      };
      const token = localStorage.getItem('token'); 
      $http.put('http://localhost:8081/projeto/update', projeto, {
        headers: { 'Authorization': 'Bearer ' + token }
      })
        .then(function(response) {
          alert('Atualizado com Sucesso');
          $scope.voltarListar();
        })
        .catch(function(error) {
          alert('Atualização não realizada' + error.data.error);
        });
    };
  })

  .controller('ListaProjeto', function ($scope, $http, $location, $rootScope, $route) {
    $scope.irParaCadastro = function(idProjeto, nome, descricao, dataInicio, dataFim) {
      $rootScope.projeto = {
        idProjeto: idProjeto,
        nome: nome,
        descricao: descricao,
        dataInicio: dataInicio,
        dataFim: dataFim
      };
      $location.path('/cadastrarProjeto');
    };

    $scope.deletarProjeto = function(idProjeto) {
      const token = localStorage.getItem('token');
  
      $http.delete('http://localhost:8081/projeto/delete/' + idProjeto, {
          headers: { 'Authorization': 'Bearer ' + token }
      })
      .then(function(response) {
          $scope.listaProjetos = $scope.listaProjetos.filter(function(projeto) {
            return projeto.idProjeto !== idProjeto;
          });
          alert('Deletado com Sucesso');
      })
      .catch(function(error) {
          alert('Não foi possível deletar: ' + (error.data?.error || 'Erro desconhecido'));
          console.error(error);
      });
  };

    $scope.app = "Lista de projetos";
    $scope.baixarFoto = function(foto) {
      if (!foto) return;
      const base64String = foto;
      const link = document.createElement('a');
      link.href = base64String.replace(/^"(.*)"$/, '$1');
      link.download = 'foto.jpg';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    };

    const token = localStorage.getItem('token'); 
    $http.get('http://localhost:8081/projeto/findAll/', {
      headers: {
        'Authorization': 'Bearer ' + token
      }
    }).then(function(response) {
        $scope.listaProjetos = response.data.map(function (projeto) {
          return {
            idProjeto: projeto.id,
            nome: projeto.nome,
            descricao: projeto.descricao,
            foto: atob(projeto.foto),
            dataInicio: new Date(projeto.dataInicio),
            dataFim: new Date(projeto.dataFim),
            tarefas: projeto.tarefas
              ? projeto.tarefas.map(function (tarefa) {
                  return {
                    ...tarefa,
                    dataInicio: new Date(tarefa.dataInicio),
                    dataFim: new Date(tarefa.dataFim)
                  };
                })
              : []
          };
        });
      })
      .catch(function(error) {
        alert('Erro ao buscar projetos');
        console.error('Erro:', error);
      });
  });
